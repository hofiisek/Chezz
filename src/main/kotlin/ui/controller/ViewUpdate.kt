package ui.controller

import board.Board
import board.Position
import board.Square
import game.Player
import piece.Piece
import ui.view.BoardView

/**
 * Changed to be rendered in the [BoardView].
 * Is generated by the [BoardController] as a response to some action, such as when
 * a piece is selected, deselected, or moved with.
 *
 * @author Dominik Hoftych
 */
sealed class ViewUpdate {

    /**
     * Nothing has changed so there's nothing new to render.
     */
    object Nothing : ViewUpdate()

    /**
     * The board state has changed somehow, most likely some move was performed, so it needs to be fully redrawn.
     */
    data class BoardChanged(val board: Board) : ViewUpdate()

    /**
     * The [piece] was selected, so the square occupied by the piece as well as all its [allowedMoves]
     * are colored with green color. Moreover, if the king of the player on turn is currently in check,
     * the square occupied by the [checkedKing] is colored with red color,
     * if it's not the selected piece at the same time.
     */
    data class PieceSelected(val piece: Piece, val allowedMoves: Set<Square>, val checkedKing: Piece?) : ViewUpdate()

}